(define (make-graph)
  (list 'vertices (list) 'num-vertices 0))

(define (add-vertex g key)
  (set-car! (cdr g) (cons (list key 'connected-to (list)) (car (cdr g))))
  (set-car! (cddr g) (+ 1 (car (cddr g))))
  (car (cdr g)))

(define (get-vertex g key)
  (let loop ((vertices (car (cdr g))))
    (cond ((null? vertices) #f)
          ((eq? (caar vertices) key) (car vertices))
          (else (loop (cdr vertices))))))

(define (add-edge g from-key to-key weight)
  (let ((from-vertex (get-vertex g from-key))
        (to-vertex (get-vertex g to-key)))
    (if (not from-vertex)
        (set-car! (cdr g) (cons (list from-key 'connected-to (list)) (car (cdr g))))
        (set-car! (cddr g) (+ 1 (car (cddr g)))))
    (if (not to-vertex)
        (set-car! (cdr g) (cons (list to-key 'connected-to (list)) (car (cdr g))))
        (set-car! (cddr g) (+ 1 (car (cddr g)))))
    (let ((from-vertex (get-vertex g from-key))
          (to-vertex (get-vertex g to-key)))
      (set-cdr! (cddr from-vertex) (cons (list to-vertex weight) (cddr from-vertex))))))

(define (get-vertices g)
  (map car (car (cdr g))))

(define (get-connections v)
  (map car (caddr v)))

(define (get-key v)
  (car v))

(define (get-weight v neighbor)
  (let loop ((connections (caddr v)))
    (cond ((null? connections) #f)
          ((eq? (caar connections) neighbor) (cadar connections))
          (else (loop (cdr connections))))))

(define (print-graph g)
  (let loop ((vertices (car (cdr g))))
    (cond ((null? vertices) #f)
          (else (begin (display (car vertices))
                      (newline)
                      (loop (cdr vertices)))))))

(define g (make-graph))
(add-vertex g 0)
(add-vertex g 1)
(add-vertex g 2)
(add-vertex g 3)
(add-vertex g 4)
(add-vertex g 5)
(add-edge g 0 1 5)
(add-edge g 0 5 2)
(add-edge g 1 2 4)
(add-edge g 2 3 9)
(add-edge g 3 4 7)
(add-edge g 3 5 3)
(add-edge g 4 0 1)
(add-edge g 5 4 8)
(add-edge g 5 2 1)
(print-graph g)

(define (print-connections v)
  (let loop ((connections (caddr v)))
    (cond ((null? connections) #f)
          (else (begin (display (caar connections))
                      (newline)
                      (loop (cdr connections)))))))

(print-connections (get-vertex g 0))
(print-connections (get-vertex g 1))
(print-connections (get-vertex g 2))
(print-connections (get-vertex g 3))
(print-connections (get-vertex g 4))
(print-connections (get-vertex g 5))

(define (print-weight v neighbor)
  (let loop ((connections (caddr v)))
    (cond ((null? connections) #f)
          ((eq? (caar connections) neighbor) (cadar connections))
          (else (loop (cdr connections))))))

(print-weight (get-vertex g 0) (get-vertex g 1))
(print-weight (get-vertex g 0) (get-vertex g 5))
(print-weight (get-vertex g 1) (get-vertex g 2))
(print-weight (get-vertex g 2) (get-vertex g 3))
(print-weight (get-vertex g 3) (get-vertex g 4))
(print-weight (get-vertex g 3) (get-vertex g 5))
(print-weight (get-vertex g 4) (get-vertex g 0))
(print-weight (get-vertex g 5) (get-vertex g 4))
(print-weight (get-vertex g 5) (get-vertex g 2))

(define (print-vertices g)
  (let loop ((vertices (car (cdr g))))
    (cond ((null? vertices) #f)
          (else (begin (display (caar vertices))
                      (newline)
                      (loop (cdr vertices)))))))

(print-vertices g)

(define (print-num-vertices g)
  (display (car (cddr g)))
  (newline))

(print-num-vertices g)

(define (print-graph g)
  (let loop ((vertices (car (cdr g))))
    (cond ((null? vertices) #f)
          (else (begin (display (car vertices))
                      (newline)
                      (loop (cdr vertices)))))))

(print-graph g)
